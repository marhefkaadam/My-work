#lang racket

(require "semestral.rkt")
(require "helper.rkt")
(require "assert.rkt")   ; source: peckato1 - https://courses.fit.cvut.cz/BI-PPA/tutorials/solutions/assert.rkt

; --------------------------------
; Tests for semestral - Rule 110 (marheada)
; --------------------------------
; Tests for helper.rkt
; --------------------------------

(assert-equal (last-el '(1 2 3)) 3)
(assert-equal (last-el '(1)) 1)
(assert-equal (last-el '(1 2 100)) 100)
(assert-equal (last-el '()) '())

(assert-equal (my-append '(1 2 3) 4) '(1 2 3 4))
(assert-equal (my-append '(1 2 3) '()) '(1 2 3))
(assert-equal (my-append '() 4) '(4))
(assert-equal (my-append '() '()) '())

; will only run for equality of both lists having 3 elements, so no more tests needed
(assert-true (rule-equal? '(1 2 3) '(1 2 3)))
(assert-false (rule-equal? '(1 2 100) '(1 2 3)))
(assert-false (rule-equal? '(1 2 3) '(100 2 3)))
(assert-false (rule-equal? '(100 2 3) '(1 200 3)))

; --------------------------------
; Tests for semestral.rkt
; --------------------------------

(assert-equal (rule '(1 1 1)) 0)
(assert-equal (rule '(1 1 0)) 1)
(assert-equal (rule '(1 0 1)) 1)
(assert-equal (rule '(1 0 0)) 0)
(assert-equal (rule '(0 1 1)) 1)
(assert-equal (rule '(0 1 0)) 1)
(assert-equal (rule '(0 0 1)) 1)
(assert-equal (rule '(0 0 0)) 0)
(assert-equal (rule '(2 2 2)) (void))
(assert-equal (rule '()) (void))

(assert-equal (next-line '(1 0 1 0 0 1)) '(1 1 1 0 1 1))
(assert-equal (next-line '(1 0 1)) '(1 1 1))
(assert-equal (next-line '(1)) '(0))
(assert-equal (next-line '(1 1 1 1 0 1 1 1)) '(0 0 0 1 1 1 0 0))
(assert-equal (next-line '(1 1 1 1 0 1 1 1 0 0 0)) '(1 0 0 1 1 1 0 1 0 0 1))
(assert-equal (next-line '(1 1 1)) '(0 0 0))
(assert-equal (next-line '(1 1 1 0 0)) '(1 0 1 0 1))

(assert-equal (rule-110 '(1 1 1) 4)
 '((1 1 1)
   (0 0 0)
   (0 0 0)
   (0 0 0)
   (0 0 0))
)
(assert-equal (rule-110 '(0 0 1 1 0) 5)
 '((0 0 1 1 0)
   (0 1 1 1 0)
   (1 1 0 1 0)
   (1 1 1 1 1)
   (0 0 0 0 0)
   (0 0 0 0 0))
)
(assert-equal (rule-110 '(1) 5)
 '((1)
   (0)
   (0)
   (0)
   (0)
   (0))
 )
(assert-equal (rule-110 '(1 0) 5)
 '((1 0)
   (1 1)
   (0 0)
   (0 0)
   (0 0)
   (0 0))
 )
(assert-equal (rule-110 '(1 0 0 1 1 0) 10)
 '((1 0 0 1 1 0)
   (1 0 1 1 1 1)
   (1 1 1 0 0 0)
   (1 0 1 0 0 1)
   (1 1 1 0 1 1)
   (0 0 1 1 1 0)
   (0 1 1 0 1 0)
   (1 1 1 1 1 0)
   (1 0 0 0 1 1)
   (1 0 0 1 1 0)
   (1 0 1 1 1 1))
 )
(assert-equal (rule-110 '(0 1 0 0 1 1 0 1 0 1 0 1 0) 9)
 '((0 1 0 0 1 1 0 1 0 1 0 1 0)
  (1 1 0 1 1 1 1 1 1 1 1 1 0)
  (1 1 1 1 0 0 0 0 0 0 0 1 1)
  (0 0 0 1 0 0 0 0 0 0 1 1 0)
  (0 0 1 1 0 0 0 0 0 1 1 1 0)
  (0 1 1 1 0 0 0 0 1 1 0 1 0)
  (1 1 0 1 0 0 0 1 1 1 1 1 0)
  (1 1 1 1 0 0 1 1 0 0 0 1 1)
  (0 0 0 1 0 1 1 1 0 0 1 1 0)
  (0 0 1 1 1 1 0 1 0 1 1 1 0))
)
(assert-equal (rule-110 '(1 1 0 1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1) 10)
 '((1 1 0 1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1)
  (0 1 1 1 0 0 0 1 1 0 1 1 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0)
  (1 1 0 1 0 0 1 1 1 1 1 1 0 1 1 1 0 0 0 1 1 1 0 0 0 0 1 1 1 0)
  (1 1 1 1 0 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 1 0 0 0 1 1 0 1 1)
  (0 0 0 1 1 1 1 0 0 0 1 1 0 1 1 1 0 1 1 1 1 1 0 0 1 1 1 1 1 0)
  (0 0 1 1 0 0 1 0 0 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 1 0 0 0 1 0)
  (0 1 1 1 0 1 1 0 1 1 0 0 0 1 1 1 0 1 0 0 1 1 1 1 1 0 0 1 1 0)
  (1 1 0 1 1 1 1 1 1 1 0 0 1 1 0 1 1 1 0 1 1 0 0 0 1 0 1 1 1 0)
  (1 1 1 1 0 0 0 0 0 1 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 0 1 1)
  (0 0 0 1 0 0 0 0 1 1 1 1 0 0 0 1 1 1 0 0 1 0 1 1 0 0 1 1 1 0)
  (0 0 1 1 0 0 0 1 1 0 0 1 0 0 1 1 0 1 0 1 1 1 1 1 0 1 1 0 1 0))
)
(assert-equal (rule-110 '(1 0 1 1 1 0 0 1 0 1 0 1 1 1 0 1 0 0 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0) 20)
'((1 0 1 1 1 0 0 1 0 1 0 1 1 1 0 1 0 0 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0)
  (1 1 1 0 1 0 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1)
  (0 0 1 1 1 1 1 0 0 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1)
  (0 1 1 0 0 0 1 0 0 0 1 1 0 1 1 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1)
  (1 1 1 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 1)
  (0 0 1 0 1 1 1 0 1 1 0 0 0 1 1 1 0 1 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0)
  (0 1 1 1 1 0 1 1 1 1 0 0 1 1 0 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 1 1 1 0)
  (1 1 0 0 1 1 1 0 0 1 0 1 1 1 1 1 0 1 0 0 1 1 0 0 0 1 0 0 0 1 1 0 1 0)
  (1 1 0 1 1 0 1 0 1 1 1 1 0 0 0 1 1 1 0 1 1 1 0 0 1 1 0 0 1 1 1 1 1 1)
  (0 1 1 1 1 1 1 1 1 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 1 1 0 1 1 0 0 0 0 0)
  (1 1 0 0 0 0 0 0 1 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0 0 0 0)
  (1 1 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 1 0 0 0 0 1)
  (0 1 0 0 0 0 1 1 0 0 0 0 0 1 0 0 1 1 0 1 0 0 1 1 0 1 0 1 1 0 0 0 1 1)
  (1 1 0 0 0 1 1 1 0 0 0 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1)
  (0 1 0 0 1 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 1 0 1 1 0 0)
  (1 1 0 1 1 1 1 1 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 1 1 1 1 1 0 0)
  (1 1 1 1 0 0 0 1 0 1 1 1 0 0 1 1 0 1 1 1 1 1 0 0 0 0 1 1 0 0 0 1 0 1)
  (0 0 0 1 0 0 1 1 1 1 0 1 0 1 1 1 1 1 0 0 0 1 0 0 0 1 1 1 0 0 1 1 1 1)
  (0 0 1 1 0 1 1 0 0 1 1 1 1 1 0 0 0 1 0 0 1 1 0 0 1 1 0 1 0 1 1 0 0 1)
  (0 1 1 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1)
  (1 1 0 0 0 0 1 1 1 1 0 0 1 1 0 1 1 1 1 1 0 1 1 1 0 0 0 0 0 0 1 1 1 1))
)